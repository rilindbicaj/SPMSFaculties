// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

namespace Persistence.Migrations
{
    [DbContext(typeof(FacultyDBContext))]
    [Migration("20220708013601_StudentGuid")]
    partial class StudentGuid
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Faculty", b =>
                {
                    b.Property<int>("FacultyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FacultyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LevelID")
                        .HasColumnType("int");

                    b.Property<int>("MajorID")
                        .HasColumnType("int");

                    b.HasKey("FacultyID");

                    b.HasIndex("LevelID");

                    b.HasIndex("MajorID", "LevelID")
                        .IsUnique();

                    b.ToTable("Faculties");
                });

            modelBuilder.Entity("Domain.FacultySemester", b =>
                {
                    b.Property<int>("FacultyID")
                        .HasColumnType("int");

                    b.Property<int>("SemesterID")
                        .HasColumnType("int");

                    b.HasKey("FacultyID", "SemesterID");

                    b.HasIndex("SemesterID");

                    b.ToTable("FacultySemesters");
                });

            modelBuilder.Entity("Domain.Level", b =>
                {
                    b.Property<int>("LevelID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LevelName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LevelID");

                    b.ToTable("Levels");
                });

            modelBuilder.Entity("Domain.Major", b =>
                {
                    b.Property<int>("MajorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MajorName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MajorID");

                    b.ToTable("Majors");
                });

            modelBuilder.Entity("Domain.RegisteredSemester", b =>
                {
                    b.Property<int>("RegistrationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<int>("RegisteringSeasonID")
                        .HasColumnType("int");

                    b.Property<Guid>("StudentID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RegistrationID");

                    b.HasIndex("RegisteringSeasonID");

                    b.ToTable("RegisteredSemesters");
                });

            modelBuilder.Entity("Domain.SeasonStatus", b =>
                {
                    b.Property<int>("SeasonStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SeasonStatusID");

                    b.ToTable("SeasonStatuses");
                });

            modelBuilder.Entity("Domain.Semester", b =>
                {
                    b.Property<int>("SemesterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SemesterName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SemesterID");

                    b.ToTable("Semesters");
                });

            modelBuilder.Entity("Domain.SemesterRegisteringSeason", b =>
                {
                    b.Property<int>("SemesterRegisteringSeasonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CurrentStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Faculty")
                        .HasColumnType("int");

                    b.Property<string>("RegisteringSeasonName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SemesterRegisteringSeasonID");

                    b.HasIndex("CurrentStatus");

                    b.HasIndex("Faculty", "Semester");

                    b.ToTable("SemesterRegisteringSeasons");
                });

            modelBuilder.Entity("Domain.UserFaculty", b =>
                {
                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FacultyID")
                        .HasColumnType("int");

                    b.HasKey("UserID", "FacultyID");

                    b.HasIndex("FacultyID");

                    b.ToTable("UserFaculties");
                });

            modelBuilder.Entity("Domain.Faculty", b =>
                {
                    b.HasOne("Domain.Level", "Level")
                        .WithMany("Faculties")
                        .HasForeignKey("LevelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Major", "Major")
                        .WithMany("Faculties")
                        .HasForeignKey("MajorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Level");

                    b.Navigation("Major");
                });

            modelBuilder.Entity("Domain.FacultySemester", b =>
                {
                    b.HasOne("Domain.Faculty", "Faculty")
                        .WithMany("FacultySemesters")
                        .HasForeignKey("FacultyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Semester", "Semester")
                        .WithMany("FacultySemesters")
                        .HasForeignKey("SemesterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("Domain.RegisteredSemester", b =>
                {
                    b.HasOne("Domain.SemesterRegisteringSeason", "SemesterRegisteringSeason")
                        .WithMany("RegisteredSemesters")
                        .HasForeignKey("RegisteringSeasonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SemesterRegisteringSeason");
                });

            modelBuilder.Entity("Domain.SemesterRegisteringSeason", b =>
                {
                    b.HasOne("Domain.SeasonStatus", "SeasonStatus")
                        .WithMany("Seasons")
                        .HasForeignKey("CurrentStatus")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.FacultySemester", "FacultySemester")
                        .WithMany("RegisteringSeasons")
                        .HasForeignKey("Faculty", "Semester")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FacultySemester");

                    b.Navigation("SeasonStatus");
                });

            modelBuilder.Entity("Domain.UserFaculty", b =>
                {
                    b.HasOne("Domain.Faculty", "Faculty")
                        .WithMany("UserFaculties")
                        .HasForeignKey("FacultyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("Domain.Faculty", b =>
                {
                    b.Navigation("FacultySemesters");

                    b.Navigation("UserFaculties");
                });

            modelBuilder.Entity("Domain.FacultySemester", b =>
                {
                    b.Navigation("RegisteringSeasons");
                });

            modelBuilder.Entity("Domain.Level", b =>
                {
                    b.Navigation("Faculties");
                });

            modelBuilder.Entity("Domain.Major", b =>
                {
                    b.Navigation("Faculties");
                });

            modelBuilder.Entity("Domain.SeasonStatus", b =>
                {
                    b.Navigation("Seasons");
                });

            modelBuilder.Entity("Domain.Semester", b =>
                {
                    b.Navigation("FacultySemesters");
                });

            modelBuilder.Entity("Domain.SemesterRegisteringSeason", b =>
                {
                    b.Navigation("RegisteredSemesters");
                });
#pragma warning restore 612, 618
        }
    }
}
